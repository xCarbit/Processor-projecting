!Provera starta!
lStart: br (if !START then lStart);
!Citanje instrukcije!
PCout1, MOST1_2, ldMAR, incPC;
lIR0: eMAR, rdCPU, br (if !fcCPU then lIR0);
MDRout1, ldIR0;
br (if !gropr then lgropr); 
stPRCOD, br lPrekid;
lgropr: br(if !SPN then lSPN);
ABout3, Most3_2, MOST2_1, ldBB; 
ABout3, BBout2, sub,ldBB, ALUout1; 
BBout2, ldCW;
CWout3, dec, MOST1_2, ldCW, ALUout1; //10
lSPN: br (if bz1 then lexec);
PCout1, MOST1_2, ldMAR, incPC;
lIR1: eMAR, rdCPU, br (if !fcCPU then lIR1);
MDRout1, MOST1_3, ldIR1, ldGPRAR; 
br (if !gradr then lgradr);
stPRADR, br lPrekid;
lgradr: br (if adr2 then laddr);
br (if br2 then lexec);
PCout1, MOST1_2, ldMAR, incPC;
lIR2: eMAR, rdCPU, br (if !fcCPU then lIR2); //20
MDRout1, ldIR2, br (if jmp3 then lexec);
PCout1, MOST1_2, ldMAR, incPC;
lIR3: eMAR, rdCPU, br (if !fcCPU then lIR3);
MDRout1, ldIR3;
!Citanje operanada!
laddr: bradr;
!shortimmed!
IRPOMout3, ldBB, Most3_2, Most2_1, br lexec; //26
!regdir!
br(if Fetch3.MARN then lexec); //27
GPRout1, ldBB, br lexec;
!regind!
GPRout1, MOST1_2, ldMAR, ldCW; //29
!READ!
lread: br(if Fetch3.MARN then lexec);//30
lread1: eMAR, rdCPU, br (if !fcCPU then lread1);
incMAR, MDRout1, ldDWL;
lread2: eMAR, rdCPU, br (if !fcCPU then lread2);
MDRout1, ldDWH;
DWout2, MOST2_1, ldBB, br lexec;
!predec!
GPRout1, MOST1_2, ldAW;//36
dec, AWout3, ALUout1, MOST1_2, ldAW;
dec, AWout3, ALUout1, MOST1_2, ldAW;
AWout3, wrGPR, MOST3_2, ldMAR, ldCW, br lread; 
!memdir!
IRDAout3, MOST3_2, ldMAR, ldCW, br lread; //40
!memind!
IRDAout3, MOST3_2, ldMAR;//41
lmemind1: eMAR, rdCPU, br(if !fcCPU then lmemind1);
incMAR, MDRout1, ldDWL;
lmemind2: eMAR, rdCPU, br(if !fcCPU then lmemind2);
MDRout1, ldDWH;
DWout2, ldMAR, ldCW, br lread;
!immed!
IRDAout3, MOST3_2, Most2_1, ldBB, br lexec;//47
!bxpostinc!
ABout3, Most3_2, MOST2_1, ldBB; //48
ABout3, BBout2, sub, ldBB, ALUout1; 
BBout2, ldCW; //50
CWout3, dec, MOST1_2, ldCW, ALUout1;
CWout3, dec, MOST1_2, ldCW, ALUout1;
CWout3, dec, ldGPRAR, ALUout1; 
GPRout1, incGPRAR, ldBB;
GPRout1, MOST1_2, ldAW;
BBout2, AWout3, add, ALUout1, ldBB;
ldMAR, ldCW, BBout2; 
AWout3, inc, ALUout1, MOST1_2, ldAW;
AWout3, inc, ALUout1, MOST1_2, ldAW; 
AWout3, wrGPR, br lread; //60
!Izvrsavanje instrukcija!
lexec: bropr;
!Uslovni skokovi!
IRBRout3, br(if !brpom then lPrekid);
!Bezuslovni skokovi!
!JMP!
IRJAout2, ldPC, br lPrekid; //63
!JSR!
CWout3, MOST3_2, MOST2_1, ldGPRAR; //64 
PCLout3, mxMDR, ldMDR;
GPRout1, MOST1_2, MOST1_3, ldSP, ldMAR;
incMAR, incSP;
lIR00: eMAR, eMDR, wrCPU, br(if !fcCPU then lIR00);
incMAR, incSP, PCHout3, mxMDR, ldMDR;
lIR01: eMAR, eMDR, wrCPU, br(if !fcCPU then lIR01); //70
IRJAout2, ldPC;
SPout2, MOST2_1, MOST1_3, wrGPR, br lPrekid;
!Adresne instrukcije!
!LD!
BBout2, MOST2_1, ldAB;  //73
ldN, ldZ, br lPrekid;
!ST!
br(if !regdir then lstreg); //75
ABout3, wrGPR, br lPrekid;
lstreg: ABout3, MOST3_2, ldAW, mxMDR, ldMDR;
lstmem1: eMAR, eMDR, wrCPU, br(if !fcCPU then lstmem1);
AWHout3, mxMDR, ldMDR, incMAR;
lstmem2: eMAR, eMDR, wrCPU, br(if !fcCPU then lstmem2);//80
br lPrekid;
!LEN!
MOST3_2, MOST2_1, ABout3, ldBB; //82
ABout3, BBout2, sub, ALUout1, ldAB;
ABout3, MOST3_2, ldAW, br llen1;
lforlen: AWout3, inc, ALUout1, Most1_2, ldAW;
llen1: eMAR, rdCPU, br (if !fcCPU then llen1);
MDRout1, ldDWL, incMAR;
llen2: eMAR, rdCPU, br (if !fcCPU then llen2);
MDRout1, ldDWH,incMAR;
DWout2, MOST2_1, MOST1_3, ldAB;
br (if !z then lforlen);
AWOut3, MOST3_2, MOST2_1, ldAB; 
ldN, ldZ, br lPrekid;
!ADD!
ABout3, BBout2, add, ALUout1, ldAB, ldC, ldV; //94
ldN, ldZ, br lPrekid;
!INC!
CWout3, MOST3_2, ldMAR; //96
BBout2, ldAW;
AWout3, inc, ALUout1, ldBB;
br(if !regdir then lincnotreg);
BBout2, MOST2_1, MOST1_3, wrGPR, br lPrekid;
lincnotreg: BBout2, ldAW, mxMDR, ldMDR, MOST2_1, MOST1_3;
linc1: eMAR, eMDR, wrCPU, br(if !fcCPU then linc1);
AWHout3, mxMDR, ldMDR, incMAR;
linc2: eMAR, eMDR, wrCPU, br(if !fcCPU then linc2);
br lPrekid;
!SUB!
ABout3, BBout2, sub, ALUout1, ldAB, ldC, ldV; //106
ldN, ldZ, br lPrekid;
!AND!
BBout2, ABout3, and, ALUout1, ldAB; //108
ldN, ldZ, ldC, ldV, br lPrekid;
!OR!
ABout3, BBout2, or, ALUout1, ldAB; //110
ldN, ldZ, br lPrekid;
!XOR!
ABout3, BBout2, xor, ALUout1, ldAB;  //112
ldN, ldZ, br lPrekid;
!NEG!
BBout2, Most2_1, ldAB; //114
ABout3, not, ALUout1, ldAB; 
ABout3, inc, ALUout1, ldAB;
ldN, ldZ, br lPrekid;
!MAX!
ABout3, MOST3_2, ldAW; //118 
ABout3, BBout2, sub, ALUout1, ldAB, ldC, ldV;
ldN, ldZ;
br (if !MAXXOR then lIR0B);
BBout2, MOST2_1, ldAB, br lPrekid;
lIR0B: AWout3, MOST3_2, MOST2_1, ldAB, br lPrekid;
!CMP!
ABout3, MOST3_2, ldAW; //124
ABout3, BBout2, sub, ALUout1, ldAB, ldC, ldV;
ldN, ldZ, AWout3, MOST3_2, MOST2_1, ldAB, br lPrekid;
!RTI!
CWout3, MOST3_2, MOST2_1, ldGPRAR; //127
GPRout1, Most1_3, MOST1_2, ldSP, ldMAR;
lIR0C: eMAR, rdCPU, br (if !fcCPU then lIR0C);
MDRout1, ldPSWH, decSP;
SPout2, ldMAR, decSP;
lIR0D: eMAR, rdCPU, br (if !fcCPU then lIR0D);
MDRout1, ldPSWL;
SPout2, ldMAR, decSP;
lIR0C1: eMAR, rdCPU, br (if !fcCPU then lIR0C1);
MDRout1, ldDWH;
SPout2, ldMAR, decSP;
lIR0D1: eMAR, rdCPU, br (if !fcCPU then lIR0D1);
MDRout1, ldDWL;
DWout2, ldPC;
SPout2, ldMAR, decSP; //141
lIR0D2: eMAR, rdCPU, br (if !fcCPU then lIR0D2);
MDRout1, ldDWH;
SPout2, ldMAR, decSP;
lIR0C2: eMAR, rdCPU, br (if !fcCPU then lIR0C2);
MDRout1,  ldDWL;
DWout2, MOST2_1, ldAB;
SPout2, MOST2_1, MOST1_3, wrGPR;
!RTS!
CWout3, MOST3_2, MOST2_1, ldGPRAR; //149
GPRout1, Most1_3, MOST1_2, ldSP, ldMAR;
lIR0E: eMAR, rdCPU, br (if !fcCPU then lIR0E);
MDRout1, ldDWH, decSP;
SPout2, ldMAR, decSP;
lIR0F: eMAR, rdCPU, br (if !fcCPU then lIR0F);
MDRout1, ldDWL;
SPout2, MOST2_1, MOST1_3, wrGPR;
DWout2, ldPC, br lPrekid;
!ASR, LSR, ROR, RORC!
shr, ldC; //158
ldN, ldZ, br lPrekid;
!ASL, LSL, ROL, ROLC!
shl, ldC; //160
ldN, ldZ, br lPrekid;
!INTE!
stPSWI, br lPrekid; //162
!INTD!
clPSWI, br lPrekid; //163
!STIVTP!
ABout3, ldIVTP, br lPrekid; //164
!PUSH!
CWout3, MOST3_2, MOST2_1, ldGPRAR;
ABout3, MOST3_2, ldAW, mxMDR, ldMDR;
GPRout1, MOST1_2, MOST1_3, ldSP, ldMAR;
incMAR, incSP;
lSPN0: eMAR, eMDR, wrCPU, br(if !fcCPU then lSPN0);
incMAR, incSP, AWHout3, mxMDR, ldMDR;
lSPN1: eMAR, eMDR, wrCPU, br(if !fcCPU then lSPN1);
SPout2, MOST2_1, MOST1_3, wrGPR, br lPrekid;
!POP!
CWout3, MOST3_2, MOST2_1, ldGPRAR; //173
GPRout1, Most1_3, MOST1_2, ldSP, ldMAR;
lSPN2: eMAR, rdCPU, br (if !fcCPU then lSPN2);
MDRout1, ldDWH, decSP;
SPout2, ldMAR, decSP;
lSPN3: eMAR, rdCPU, br (if !fcCPU then lSPN3);
MDRout1, ldDWL;
SPout2, MOST2_1, MOST1_3, wrGPR;
DWout2, MOST2_1, ldAB;
ldN, ldZ, br lPrekid;
!CLR!
ABout3, Most3_2, MOST2_1, ldBB; //183
ABout3, BBout2, sub, ALUout1, ldAB; 
ldN, ldZ, br lPrekid;
!HALT!
clSTART, br lPrekid;  //186
!Beql,..., Blsseu!
IRBRout3, br (if !brpom then lPrekid); //187 Prkid umesto Prekid BR!!!
PCout1, IRPOMout3, ADDout2, ldPC, br lPrekid;
!Opsluzivanje prekida!
lPrekid: br (if !prekid then lStart);
!Cuvanje konteksta procesora!
ABout3, Most3_2, MOST2_1, ldBB;
ABout3, BBout2, sub,ldBB; 
BBout2, ldCW;
CWout3, dec, ldGPRAR, ALUout1;
GPRout1, MOST1_3, ldSP;
incSP;
SPout2, ldMAR, PCLout3, mxMDR, ldMDR, incSP;
lSPN4: eMAR, eMDR, wrCPU, br (if !fcCPU then lSPN4);
SPout2, ldMAR, PCHout3, mxMDR, ldMDR, incSP;
lSPN5: eMAR, eMDR, wrCPU, br (if !fcCPU then lSPN5);
SPout2, ldMAR, PSWLout3, mxMDR, ldMDR, incSP;
lSPN6: eMAR, eMDR, wrCPU, br (if !fcCPU then lSPN6);
SPout2, ldMAR, PSWHout3, mxMDR, ldMDR;
lSPN7: eMAR, eMDR, wrCPU, br (if !fcCPU then lSPN7);
SPout2, MOST2_1, MOST1_3, wrGPR;
!Utvrdivanje broja ulaza!
br (if !PRINS then lSPN8);
IRPOMout3, ldBR, clPRINS, br lIR13;
lSPN8: br (if !PRCOD then lSPN9);
UINTout3, ldBR, clPRCOD, br lIR13;
lSPN9: br (if !PRADR then lIR10);
UINTout3, ldBR, clPRADR, br lIR13;
lIR10: br (if !PRINM then lIR11);
UINTout3, ldBR, clPRINM, br lIR13;
lIR11: br (if !printr then lIR12);
UEXTout3, ldBR, clINTR, ldL, br lIR13;
lIR12: UINTout3, ldBR;
!Utvrdivanje adrese prekidne rutine!
lIR13: IVTPout1, IVTDSPout3, ADDout2, ldMAR;
lIR14: eMAR, rdCPU, br (if !fcCPU then lIR14);
MDRout1, ldDWL, incMAR;
lIR15: eMAR, rdCPU, br (if !fcCPU then lIR15);
MDRout1, ldDWH;
DWout2,ldPC,clPSWI,clPSWT, br lStart;
